using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using TeamGo.Shared.DataProviding;
using Test.Engine;
using Xunit;

namespace TeamGo.Shared.Tests.Unit
{
    public class DBContextRepositoryTestsUnit
    {
        private readonly DbContextOptions<TestDbContext> _dynamicOptions;

        public DBContextRepositoryTestsUnit()
        {
            _dynamicOptions = InMemoryDbOptions.GetDBInMemoryOptions<TestDbContext>();
        }

        [Fact(Timeout = 1000)]

        public async void CreateEntityAsync_Preseted_Entity_With_Autogenerated_Guid_Correctly_Added_Into_Database()
        {
            TestEntity testEntity = new TestEntity()
            {
                IntData = 10,
                StringData = "10"
            };

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid actual = await repository.CreateEntityAsync(testEntity);
                Assert.NotEqual(default, actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_CreateEntityAsync_Preseted_Entity_With_Pre_Generated_Guid_Correctly_Added_Into_Database()
        {
            Guid presetedGuid = Guid.NewGuid();
            TestEntity testEntity = new TestEntity()
            {
                Id = presetedGuid,
                IntData = 10,
                StringData = "10"
            };

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid actual = await repository.CreateEntityAsync(testEntity);
                Assert.Equal(presetedGuid, actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_Entity_With_Autogenerated_Guid_Correctly_Added_With_Action_Into_Database()
        {
            Action<TestEntity> entityOptions = x =>
            {
                x.IntData = 12;
                x.StringData = "13";
            };

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid actual = await repository.CreateEntityAsync(entityOptions);
                Assert.NotEqual(default, actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntityAsync_Try_Get_Entity_From_Database_by_Id()
        {
            int iterations = 10;
            List<Guid> generatedGuids = new List<Guid>();
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            Random rnd = new Random();
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                for (int i = 0; i < iterations; i++)
                {
                    generatedGuids.Add(await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = rnd.Next(100),
                        StringData = rnd.Next(100).ToString()
                    }));
                }

                Guid firstGuid = generatedGuids.FirstOrDefault();
                Guid lastGuid = generatedGuids.LastOrDefault();

                TestEntity entity1 = await repository.ReadEntityAsync<TestEntity>(firstGuid);
                TestEntity entity2 = await repository.ReadEntityAsync<TestEntity>(lastGuid);

                bool actual = entity1 != null
                    && entity2 != null
                    && entity1.Id.Equals(firstGuid)
                    && entity2.Id.Equals(lastGuid);

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntityAsync_Try_Get_Null_Entity_From_Database()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                TestEntity actual = await repository.ReadEntityAsync<TestEntity>(Guid.NewGuid());
                Assert.Null(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntitiesAsync_Try_Get_Multiply_Entities_By_Predicate()
        {
            Random rnd = new Random();
            int iterationsForInt = rnd.Next(1, 11);
            int iterationsForString = rnd.Next(1, 11);

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                int intFieldData = rnd.Next(100);
                for (int i = 0; i < iterationsForInt; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = intFieldData,
                        StringData = rnd.Next(100).ToString()
                    });
                }

                string stringFieldData = rnd.Next(100).ToString();
                for (int i = 0; i < iterationsForString; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = rnd.Next(100),
                        StringData = stringFieldData
                    });
                }

                IEnumerable<TestEntity> given1 = await repository.ReadEntitiesAsync<TestEntity>(x => x.IntData == intFieldData);
                IEnumerable<TestEntity> given2 = await repository.ReadEntitiesAsync<TestEntity>(x => x.StringData == stringFieldData);

                bool actual = given1.Count() == iterationsForInt
                    && given2.Count() == iterationsForString;

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void UpdateEntity_Try_Update_Entity()
        {
            Random rnd = new Random();
            int intData = rnd.Next(10);
            TestEntity testEntity = new TestEntity()
            {
                IntData = intData,
                StringData = "10"
            };

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid id = await repository.CreateEntityAsync(testEntity);

                int newIntData = rnd.Next(20, 50);
                await repository.UpdateEntity<TestEntity>(id, x => x.IntData = newIntData);

                int actual = (await repository.ReadEntityAsync<TestEntity>(id)).IntData;

                Assert.Equal(newIntData, actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void DeleteEntityAsync_Try_Remove_Entity()
        {
            TestEntity testEntity = new TestEntity()
            {
                IntData = 10,
                StringData = "10"
            };

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid id = await repository.CreateEntityAsync(testEntity);

                bool wasCreated = (await repository.ReadEntityAsync<TestEntity>(id)) != null;

                await repository.DeleteEntityAsync<TestEntity>(id);

                bool wasDeleted = (await repository.ReadEntityAsync<TestEntity>(id)) == null;

                bool actual = wasCreated && wasDeleted;

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_With_Preseted_Entity_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                _ = await repository.CreateEntityAsync(new TestEntity());
            });
        }

        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_With_Action_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                _ = await repository.CreateEntityAsync<TestEntity>(x => x.IntData = 10);
            });
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntityAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                _ = await repository.ReadEntityAsync<TestEntity>(Guid.NewGuid());
            });
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntitiesAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                _ = await repository.ReadEntitiesAsync<TestEntity>(x => true);
            });
        }

        [Fact(Timeout = 1000)]
        public async void UpdateEntityAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                await repository.UpdateEntity<TestEntity>(Guid.NewGuid(), x => x.IntData = default);
            });
        }

        [Fact(Timeout = 1000)]
        public async void DeleteEntityAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                await repository.DeleteEntityAsync<TestEntity>(Guid.NewGuid());
            });
        }

        [Fact(Timeout = 1000)]
#pragma warning disable CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
        public void Ctor_Throws_Argument_Null_Exception() => _ = Assert.Throws<ArgumentNullException>(() => new DBContextRepository<TestDbContext>(null));
#pragma warning restore CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.


        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_With_Preseted_Entity_Throws_Argument_Null_Exception()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
                {

#pragma warning disable CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                    _ = await repository.CreateEntityAsync<TestEntity>(entity: null);
#pragma warning restore CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                }

            });
        }

        [Fact(Timeout = 1000)]
        public async void CreateEntityAsync_With_Optional_Entity_Throws_Argument_Null_Exception()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
                {

#pragma warning disable CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                    _ = await repository.CreateEntityAsync<TestEntity>(entityOptions: null);
#pragma warning restore CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                }

            });
        }

        [Fact(Timeout = 1000)]
        public async void ReadEntitiesAsync_Throws_Argument_Null_Exception()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
                {

#pragma warning disable CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                    _ = await repository.ReadEntitiesAsync<TestEntity>(predicate: null);
#pragma warning restore CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                }

            });
        }

        [Fact(Timeout = 1000)]
        public async void UpdateEntity_Throws_Argument_Null_Exception()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
                {

#pragma warning disable CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                    await repository.UpdateEntity<TestEntity>(Guid.NewGuid(), null);
#pragma warning restore CS8625 // Литерал, равный NULL, не может быть преобразован в ссылочный тип, не допускающий значение NULL.
                }

            });
        }

        [Fact(Timeout = 1000)]
        public async void SoftDeleteAsync_Soft_Deleting_Correctly_Done()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            TestEntity entity = new TestEntity();
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid id = await repository.CreateEntityAsync(entity);
                await repository.SoftDeleteAsync<TestEntity>(id);
                TestEntity given = await repository.ReadEntityAsync<TestEntity>(id);

                Assert.True(given.IsSoftDeleted);
            }
        }

        [Fact(Timeout = 1000)]
        public async void SoftDeleteAsync_Soft_Deleting_Correctly_Done_Check_Time()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            TestEntity entity = new TestEntity();
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid id = await repository.CreateEntityAsync(entity);
                DateTime before = DateTime.UtcNow;
                await repository.SoftDeleteAsync<TestEntity>(id);
                DateTime after = DateTime.UtcNow;
                TestEntity given = await repository.ReadEntityAsync<TestEntity>(id);

                bool actual = given.DeleteTime >= before && given.DeleteTime <= after;

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void RepareAsync_Repare_After_Soft_Deleting_Correctly_Done()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            TestEntity entity = new TestEntity();
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                Guid id = await repository.CreateEntityAsync(entity);
                await repository.SoftDeleteAsync<TestEntity>(id);
                bool deleted = (await repository.ReadEntityAsync<TestEntity>(id)).IsSoftDeleted;
                await repository.RepareAsync<TestEntity>(id);
                TestEntity reparedEntity = await repository.ReadEntityAsync<TestEntity>(id);
                bool repared = !reparedEntity.IsSoftDeleted && reparedEntity.DeleteTime == null;

                Assert.True(deleted && repared);
            }
        }

        [Fact(Timeout = 1000)]
        public async void ReadSoftEntitiesAsync_Try_Get_Multiply_Entities_By_Predicate_Weak_Deleted()
        {
            Random rnd = new Random();
            int iterationsForInt = rnd.Next(5, 11);
            int iterationsForString = rnd.Next(5, 11);
            int entitiesCount = iterationsForInt + iterationsForString;
            int iterationsForDelete = rnd.Next(10);

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                int intFieldData = rnd.Next(100);
                for (int i = 0; i < iterationsForInt; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = intFieldData,
                        StringData = rnd.Next(100).ToString()
                    });
                }

                string stringFieldData = rnd.Next(100).ToString();
                for (int i = 0; i < iterationsForString; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = rnd.Next(100),
                        StringData = stringFieldData
                    });
                }

                List<Guid> guids = (await repository.ReadEntitiesAsync<TestEntity>(x => true))
                    .Select(x => x.Id)
                    .OrderBy(x => x)
                    .ToList();

                for (int i = 0; i < iterationsForDelete; i++)
                {
                    await repository.SoftDeleteAsync<TestEntity>(guids[i]);
                }

                IEnumerable<TestEntity> given1 = await repository.ReadSoftEntitiesAsync<TestEntity>(x => x.IntData == intFieldData, true);
                IEnumerable<TestEntity> given2 = await repository.ReadSoftEntitiesAsync<TestEntity>(x => x.StringData == stringFieldData, true);

                bool actual = given1.Count() + given2.Count() == iterationsForDelete;

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void ReadSoftEntitiesAsync_Try_Get_Multiply_Entities_By_Predicate_Not_Weak_Deleted()
        {
            Random rnd = new Random();
            int iterationsForInt = rnd.Next(5, 11);
            int iterationsForString = rnd.Next(5, 11);
            int entitiesCount = iterationsForInt + iterationsForString;
            int iterationsForDelete = rnd.Next(10);

            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            using (DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor))
            {
                int intFieldData = rnd.Next(100);
                for (int i = 0; i < iterationsForInt; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = intFieldData,
                        StringData = rnd.Next(100).ToString()
                    });
                }

                string stringFieldData = rnd.Next(100).ToString();
                for (int i = 0; i < iterationsForString; i++)
                {
                    await repository.CreateEntityAsync(new TestEntity()
                    {
                        IntData = rnd.Next(100),
                        StringData = stringFieldData
                    });
                }

                List<Guid> guids = (await repository.ReadEntitiesAsync<TestEntity>(x => true))
                    .Select(x => x.Id)
                    .OrderBy(x => x)
                    .ToList();

                for (int i = 0; i < iterationsForDelete; i++)
                {
                    await repository.SoftDeleteAsync<TestEntity>(guids[i]);
                }

                IEnumerable<TestEntity> given1 = await repository.ReadSoftEntitiesAsync<TestEntity>(x => x.IntData == intFieldData);
                IEnumerable<TestEntity> given2 = await repository.ReadSoftEntitiesAsync<TestEntity>(x => x.StringData == stringFieldData);

                bool actual = given1.Count() + given2.Count() == entitiesCount - iterationsForDelete;

                Assert.True(actual);
            }
        }

        [Fact(Timeout = 1000)]
        public async void SoftDeleteAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                await repository.SoftDeleteAsync<TestEntity>(Guid.NewGuid());
            });
        }

        [Fact(Timeout = 1000)]
        public async void RepareAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                await repository.RepareAsync<TestEntity>(Guid.NewGuid());
            });
        }

        [Fact(Timeout = 1000)]
        public async void ReadSoftEntitiesAsync_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ObjectDisposedException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                await repository.ReadSoftEntitiesAsync<TestEntity>(x => true);
            });
        }

        [Fact(Timeout = 1000)]
        public async void ReadSoftEntitiesAsync_Throws_Argument_Null_Exception()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = await Assert.ThrowsAsync<ArgumentNullException>(async () =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);

                await repository.ReadSoftEntitiesAsync<TestEntity>(null);
            });
        }

        [Fact(Timeout = 1000)]
        public void ProviderConstructor_Getter_Throws_Object_Disposed_Exception_When_Repository_Disposed()
        {
            Func<TestDbContext> contextConstrucor = () => new TestDbContext(_dynamicOptions);
            _ = Assert.Throws<ObjectDisposedException>(() =>
            {
                DBContextRepository<TestDbContext> repository = new DBContextRepository<TestDbContext>(contextConstrucor);
                repository.Dispose();

                Func<TestDbContext> prop = repository.ProviderConstructor;
            });
        }
    }
}
